script_key="TdVwhWpohFRGWfEVbDSwgRifLiopOLOG";
loadstring(game:HttpGet('https://zaphub.xyz/Exec'))()
wait(5)
-- ==============================================================
-- 2 CONFIG & AUTO-SWITCH THEO AMOUNT TR√äN SIGN + RECHECK ƒê·ªäNH K·ª≤
-- ==============================================================

-- #########################
-- CONFIG 1 (m·∫∑c ƒë·ªãnh)
-- #########################
local CONFIG1 = {
    NAME = "Config 1 (m·∫∑c ƒë·ªãnh)",
    PRINT_VERBOSE = true,
    DELAY_BETWEEN_SCAN_CALLS = 0.1,
    STOP_ON_FIRST_FOUND = false,        -- ƒë·ªÉ b·∫≠t recheck / switch li√™n t·ª•c, ƒë·∫∑t false
    RECHECK_PLOT_EVERY = 600,
    EGGS = {
        [1] = { delay = 0.1,    enabled = true  }, 
        [2] = { delay = 60,     enabled = true  }, 
        [3] = { delay = 200,   enabled = true  }, 
        [4] = { delay = 350,   enabled = true  }, 
        [5] = { delay = 800,   enabled = true  }, 
    }
}

-- #########################
-- CONFIG 2 (khi amount >= 10k/s)
-- #########################
local CONFIG2 = {
    NAME = "Config 2 (amount >= 10k/s)",
    PRINT_VERBOSE = true,
    DELAY_BETWEEN_SCAN_CALLS = 0.1,
    STOP_ON_FIRST_FOUND = false,
    RECHECK_PLOT_EVERY = 600,
    EGGS = {
        [1] = { delay = 0.1, enabled = true },
        [2] = { delay = 0.1, enabled = true },
        [3] = { delay = 0.1, enabled = true },
        [4] = { delay = 600, enabled = false },
        [5] = { delay = 1000, enabled = false },
    }
}

-- Ng∆∞·ª°ng ƒë·ªÉ chuy·ªÉn sang config 2 (10k = 10000)
local THRESHOLD_AMOUNT = 10000

-- Kho·∫£ng th·ªùi gian ki·ªÉm tra l·∫°i th√¥ng tin tr√™n sign (gi√¢y)
local SIGN_RECHECK_INTERVAL = 20    -- ch·ªânh ·ªü ƒë√¢y n·∫øu mu·ªën (m·∫∑c ƒë·ªãnh 30s)

-- ==============================================================

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local PlotsFolder = workspace:WaitForChild("__THINGS"):WaitForChild("Plots")
local Plots_Invoke = ReplicatedStorage:WaitForChild("Network"):WaitForChild("Plots_Invoke")
local LocalPlayer = Players.LocalPlayer

-- Helper: parse s·ªë c√≥ h·∫≠u t·ªë (k,m,b) v√† c√°c d·∫°ng c√≥ d·∫•u ph·∫©y / spaces
local function parseNumberWithSuffix(s)
    if not s then return nil end
    local str = tostring(s):lower()
    str = str:match("^%s*(.-)%s*$") or str
    local clean = str:gsub(",", ""):gsub("%s+", " ")

    local num, suffix = clean:match("([%d%.]+)%s*([kmb])")
    if num and suffix then
        local n = tonumber(num)
        if not n then return nil end
        if suffix == "k" then return n * 1e3 end
        if suffix == "m" then return n * 1e6 end
        if suffix == "b" then return n * 1e9 end
    end

    local plain = clean:match("([%d%.]+)")
    if plain then
        local n = tonumber(plain)
        return n
    end

    return nil
end

-- extract amount t·ª´ ch·ªØ (h·ªó tr·ª£ 10k/s, 10k sec, Amount: 10k, 10,000, ...)
local function extractAmountFromText(txt)
    if not txt then return nil end
    local lower = tostring(txt):lower()

    local a = lower:match("([%d%.,]+%s*[kmb]?)%s*/%s*s")
    if a then return parseNumberWithSuffix(a) end

    a = lower:match("([%d%.,]+%s*[kmb]?)%s*per%s*sec")
    if a then return parseNumberWithSuffix(a) end

    a = lower:match("([%d%.,]+%s*[kmb]?)%s*cand?y")
    if a then return parseNumberWithSuffix(a) end

    a = lower:match("amount[:%s]*([%d%.,]+%s*[kmb]?)")
    if a then return parseNumberWithSuffix(a) end

    a = lower:match("([%d%.,]+%s*[kmb]?)")
    if a then return parseNumberWithSuffix(a) end

    return nil
end

-- T√¨m plot c·ªßa player b·∫±ng Sign, tr·∫£ v·ªÅ plot object v√† amount (number) ƒë·ªçc ƒë∆∞·ª£c t·ª´ sign (n·∫øu c√≥)
local function findMyPlotAndAmount()
    for _, plot in ipairs(PlotsFolder:GetChildren()) do
        local sign = plot:FindFirstChild("Build") and plot.Build:FindFirstChild("Sign")
        if sign then
            local texts = {}
            for _, g in ipairs(sign:GetDescendants()) do
                if g:IsA("TextLabel") or g:IsA("TextBox") or g:IsA("TextButton") then
                    if g.Text and g.Text ~= "" then
                        table.insert(texts, {source = g:GetFullName(), text = g.Text})
                    end
                end
            end

            local containsName = false
            for _, t in ipairs(texts) do
                if tostring(t.text):lower():find(LocalPlayer.Name:lower(), 1, true) then
                    containsName = true
                    break
                end
            end

            if containsName then
                local foundAmount = nil
                for _, t in ipairs(texts) do
                    local amt = extractAmountFromText(t.text)
                    if amt and type(amt) == "number" then
                        foundAmount = amt
                        break
                    end
                end

                -- debug print
                print("‚úÖ T√¨m th·∫•y plot c·ªßa b·∫°n:", plot.Name)
                print("üìú N·ªôi dung Text tr√™n Sign:")
                for _, t in ipairs(texts) do
                    print("   ‚ûú", t.source, "=", t.text)
                end

                if foundAmount then
                    print(("üç¨ Amount ƒë·ªçc ƒë∆∞·ª£c tr√™n sign: %s"):format(tostring(foundAmount)))
                else
                    print("üç¨ Kh√¥ng t√¨m th·∫•y amount h·ª£p l·ªá tr√™n sign.")
                end

                return plot, foundAmount
            end
        end
    end
    return nil, nil
end

-- get plot id number (ID attr or PlotID or tonumber(name))
local function getPlotIdNumber(plot)
    if not plot then return nil end
    local plotId = plot:GetAttribute("ID") or plot:GetAttribute("PlotID") or tonumber(plot.Name) or plot.Name
    return tonumber(plotId) or plotId
end

-- VALID RESPONSE helper
local function isValidResponse(res, ok)
    return ok and res ~= nil and res ~= false
end

-- THREAD MANAGEMENT
-- m·ªói thread s·∫Ω c√≥ m·ªôt controller { stopFlag = false, thread = task }
local activeThreads = {}  -- mapping eggSlot -> controller

local function stopAllThreads()
    for slot, ctrl in pairs(activeThreads) do
        if ctrl and ctrl.stopFlag ~= nil then
            ctrl.stopFlag = true
        end
    end
    -- optionally wait a bit to let threads exit
    task.wait(0.15)
    activeThreads = {}
end

-- start egg thread but return controller
local function startEggThreadControlled(plotId, eggSlot, delay, printVerbose)
    local controller = { stopFlag = false }
    activeThreads[eggSlot] = controller

    task.spawn(function()
        if printVerbose then
            print(("üê£ [Thread] B·∫Øt ƒë·∫ßu spam tr·ª©ng #%d m·ªói %ss t·∫°i plot %s"):format(eggSlot, tostring(delay), tostring(plotId)))
        end

        while not controller.stopFlag do
            local args = { plotId, "PurchaseEgg", eggSlot, 3 }
            local ok, res = pcall(function()
                return Plots_Invoke:InvokeServer(unpack(args))
            end)

            if ok then
                if printVerbose then
                    print(("‚úÖ Mua th√†nh c√¥ng tr·ª©ng #%d (resp=%s)"):format(eggSlot, tostring(res)))
                end
            else
                warn(("‚ö†Ô∏è L·ªói khi mua tr·ª©ng #%d -> %s"):format(eggSlot, tostring(res)))
            end

            -- n·∫øu stopFlag b·∫≠t gi·ªØa ch·ª´ng th√¨ tho√°t s·ªõm
            local t = 0
            while t < delay and not controller.stopFlag do
                local step = math.min(1, delay - t)  -- sleep chunks ƒë·ªÉ ph·∫£n h·ªìi stopFlag nhanh h∆°n
                task.wait(step)
                t = t + step
            end
        end

        if printVerbose then
            print(("üõë [Thread] D·ª´ng thread tr·ª©ng #%d"):format(eggSlot))
        end
    end)

    return controller
end

-- Start threads theo config ƒë√£ ch·ªçn (stop tr∆∞·ªõc ƒë√≥ n·∫øu c·∫ßn)
local function startThreadsForConfig(chosenConfig, plotId)
    if not chosenConfig then return end
    stopAllThreads()

    for eggSlot, info in pairs(chosenConfig.EGGS) do
        if info.enabled then
            startEggThreadControlled(plotId, eggSlot, info.delay, chosenConfig.PRINT_VERBOSE)
            task.wait(0.08)
        else
            if chosenConfig.PRINT_VERBOSE then
                print(("‚è∏Ô∏è Tr·ª©ng #%d t·∫Øt trong %s"):format(eggSlot, chosenConfig.NAME))
            end
        end
    end
end

-- MAIN: d√≤ sign, start config, re-check sign theo interval ƒë·ªÉ switch config n·∫øu c·∫ßn
task.spawn(function()
    local currentConfig = nil
    local currentPlot = nil
    local currentAmount = nil

    while true do
        -- t√¨m plot & amount
        local plot, amount = findMyPlotAndAmount()

        if not plot then
            print("‚è≥ Ch∆∞a t√¨m th·∫•y plot c·ªßa b·∫°n. Th·ª≠ l·∫°i sau " .. tostring(CONFIG1.RECHECK_PLOT_EVERY) .. "s.")
            stopAllThreads() -- d·ª´ng m·ªçi thread n·∫øu tr∆∞·ªõc ƒë√≥ ch·∫°y
            currentConfig = nil
            currentPlot = nil
            currentAmount = nil
            task.wait(CONFIG1.RECHECK_PLOT_EVERY)
        else
            local plotIdNum = getPlotIdNumber(plot)

            -- quy·∫øt ƒë·ªãnh config theo amount
            local chosen = CONFIG1
            if amount and type(amount) == "number" and amount >= THRESHOLD_AMOUNT then
                chosen = CONFIG2
            end

            -- n·∫øu config kh√°c config hi·ªán t·∫°i hay plot kh√°c -> restart threads v·ªõi config m·ªõi
            local needRestart = false
            if currentConfig == nil or currentPlot ~= plot or currentConfig.NAME ~= chosen.NAME then
                needRestart = true
            end

            if needRestart then
                print(("‚öôÔ∏è Chuy·ªÉn sang c·∫•u h√¨nh: %s (amount=%s)"):format(chosen.NAME, tostring(amount)))
                startThreadsForConfig(chosen, plotIdNum)
                currentConfig = chosen
                currentPlot = plot
                currentAmount = amount
            else
                -- c√πng config, ch·ªâ in log n·∫øu verbose
                if currentConfig and currentConfig.PRINT_VERBOSE then
                    print(("‚ÑπÔ∏è Kh√¥ng thay ƒë·ªïi config (%s). Amount hi·ªán t·∫°i = %s"):format(currentConfig.NAME, tostring(amount)))
                end
            end

            -- ch·ªù SIGN_RECHECK_INTERVAL tr∆∞·ªõc khi ki·ªÉm tra l·∫°i sign ƒë·ªÉ c√≥ th·ªÉ ƒë·ªïi config
            local waited = 0
            while waited < SIGN_RECHECK_INTERVAL do
                task.wait(1)
                waited = waited + 1
                -- n·∫øu plot b·ªã m·∫•t gi·ªØa l√∫c ƒë·ª£i th√¨ break ƒë·ªÉ re-scan ngay
                if not plot.Parent then
                    print("‚ö†Ô∏è Plot kh√¥ng c√≤n t·ªìn t·∫°i, s·∫Ω re-scan ngay.")
                    break
                end
            end

            -- ti·∫øp v√≤ng while ƒë·ªÉ re-scan sign ngay
        end
    end
end)
